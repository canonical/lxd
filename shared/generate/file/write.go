package file

import (
	"fmt"
	"io/ioutil"
	"os"

	"github.com/pkg/errors"
)

// Reset an auto-generated source file, writing a new empty file header.
func Reset(path string, imports []string) error {
	content := fmt.Sprintf(`// +build linux,cgo,!agent

package %s

// The code below was generated by %s - DO NOT EDIT!

import (
`, os.Getenv("GOPACKAGE"), os.Args[0])

	for _, uri := range imports {
		content += fmt.Sprintf("\t%q\n", uri)
	}

	content += ")\n\n"

	// FIXME: we should only import what's needed.
	content += "var _ = api.ServerEnvironment{}\n"

	bytes := []byte(content)

	var err error

	if path == "-" {
		_, err = os.Stdout.Write(bytes)
	} else {
		err = ioutil.WriteFile(path, []byte(content), 0644)
	}

	if err != nil {
		errors.Wrapf(err, "Reset target source file '%s'", path)
	}

	return nil
}

// Append a code snippet to a file.
func Append(path string, snippet Snippet) error {
	buffer := newBuffer()
	buffer.N()

	err := snippet.Generate(buffer)
	if err != nil {
		return errors.Wrap(err, "Generate code snippet")
	}

	var file *os.File

	if path == "-" {
		file = os.Stdout
	} else {
		file, err = os.OpenFile(path, os.O_APPEND|os.O_WRONLY, 0644)
		if err != nil {
			return errors.Wrapf(err, "Open target source code file '%s'", path)
		}
		defer file.Close()
	}

	bytes, err := buffer.code()
	if err != nil {
		return err
	}

	_, err = file.Write(bytes)
	if err != nil {
		return errors.Wrapf(err, "Append snippet to target source code file '%s'", path)
	}

	return nil
}
