//go:build linux && cgo && !agent
// +build linux,cgo,!agent

package db

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"fmt"
	"github.com/lxc/lxd/lxd/db/cluster"
	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
	"github.com/pkg/errors"
	"strings"
)

var _ = api.ServerEnvironment{}

var operationObjects = cluster.RegisterStmt(`
SELECT operations.id, operations.uuid, nodes.address AS node_address, operations.project_id, operations.node_id, operations.type
  FROM operations JOIN nodes ON operations.node_id = nodes.id
  ORDER BY operations.id, operations.uuid
`)

var operationObjectsByNodeID = cluster.RegisterStmt(`
SELECT operations.id, operations.uuid, nodes.address AS node_address, operations.project_id, operations.node_id, operations.type
  FROM operations JOIN nodes ON operations.node_id = nodes.id
  WHERE operations.node_id = ? ORDER BY operations.id, operations.uuid
`)

var operationObjectsByUUID = cluster.RegisterStmt(`
SELECT operations.id, operations.uuid, nodes.address AS node_address, operations.project_id, operations.node_id, operations.type
  FROM operations JOIN nodes ON operations.node_id = nodes.id
  WHERE operations.uuid = ? ORDER BY operations.id, operations.uuid
`)

var operationCreateOrReplace = cluster.RegisterStmt(`
INSERT OR REPLACE INTO operations (uuid, project_id, node_id, type)
 VALUES (?, ?, ?, ?)
`)

var operationDeleteByUUID = cluster.RegisterStmt(`
DELETE FROM operations WHERE uuid = ?
`)

var operationDeleteByNodeID = cluster.RegisterStmt(`
DELETE FROM operations WHERE node_id = ?
`)

// GetOperations returns all available operations.
// generator: operation List
func (c *ClusterTx) GetOperations(filter OperationFilter) ([]Operation, error) {
	// Result slice.
	objects := make([]Operation, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	stmt := c.stmt(operationObjects)
	args := []interface{}{}
	stmtStr := cluster.GetRegisteredStmt(operationObjects)
	if filter.ID != nil {
		args = append(args, filter.ID)
		stmtParts := strings.Split(stmtStr, "ORDER BY")
		stmtBody := stmtParts[0]
		stmtOrderBy := ""
		if len(stmtParts) == 2 {
			stmtOrderBy = " ORDER BY " + stmtParts[1]
		}
		if strings.Contains(stmtBody, "WHERE") {
			stmtBody += " AND "
		} else {
			stmtBody += " WHERE "
		}
		fullStmt := fmt.Sprintf("%s%s = ?%s", stmtBody, "id", stmtOrderBy)
		stmt = c.stmt(cluster.RegisterStmtIfNew(fullStmt))
	}

	// Dest function for scanning a row.
	dest := func(i int) []interface{} {
		objects = append(objects, Operation{})
		return []interface{}{
			&objects[i].ID,
			&objects[i].UUID,
			&objects[i].NodeAddress,
			&objects[i].ProjectID,
			&objects[i].NodeID,
			&objects[i].Type,
		}
	}

	// Select.
	err := query.SelectObjects(stmt, dest, args...)
	if err != nil {
		return nil, errors.Wrap(err, "Failed to fetch operations")
	}

	return objects, nil
}

// GetOperationsByNodeID returns all available operations.
// generator: operation List-by-NodeID
func (c *ClusterTx) GetOperationsByNodeID(nodeID int64, filter OperationFilter) ([]Operation, error) {
	// Result slice.
	objects := make([]Operation, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	stmt := c.stmt(operationObjectsByNodeID)
	args := []interface{}{
		nodeID,
	}
	stmtStr := cluster.GetRegisteredStmt(operationObjectsByNodeID)
	if filter.ID != nil {
		args = append(args, filter.ID)
		stmtParts := strings.Split(stmtStr, "ORDER BY")
		stmtBody := stmtParts[0]
		stmtOrderBy := ""
		if len(stmtParts) == 2 {
			stmtOrderBy = " ORDER BY " + stmtParts[1]
		}
		if strings.Contains(stmtBody, "WHERE") {
			stmtBody += " AND "
		} else {
			stmtBody += " WHERE "
		}
		fullStmt := fmt.Sprintf("%s%s = ?%s", stmtBody, "id", stmtOrderBy)
		stmt = c.stmt(cluster.RegisterStmtIfNew(fullStmt))
	}

	// Dest function for scanning a row.
	dest := func(i int) []interface{} {
		objects = append(objects, Operation{})
		return []interface{}{
			&objects[i].ID,
			&objects[i].UUID,
			&objects[i].NodeAddress,
			&objects[i].ProjectID,
			&objects[i].NodeID,
			&objects[i].Type,
		}
	}

	// Select.
	err := query.SelectObjects(stmt, dest, args...)
	if err != nil {
		return nil, errors.Wrap(err, "Failed to fetch operations")
	}

	return objects, nil
}

// GetOperationsByUUID returns all available operations.
// generator: operation List-by-UUID
func (c *ClusterTx) GetOperationsByUUID(uUID string, filter OperationFilter) ([]Operation, error) {
	// Result slice.
	objects := make([]Operation, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	stmt := c.stmt(operationObjectsByUUID)
	args := []interface{}{
		uUID,
	}
	stmtStr := cluster.GetRegisteredStmt(operationObjectsByUUID)
	if filter.ID != nil {
		args = append(args, filter.ID)
		stmtParts := strings.Split(stmtStr, "ORDER BY")
		stmtBody := stmtParts[0]
		stmtOrderBy := ""
		if len(stmtParts) == 2 {
			stmtOrderBy = " ORDER BY " + stmtParts[1]
		}
		if strings.Contains(stmtBody, "WHERE") {
			stmtBody += " AND "
		} else {
			stmtBody += " WHERE "
		}
		fullStmt := fmt.Sprintf("%s%s = ?%s", stmtBody, "id", stmtOrderBy)
		stmt = c.stmt(cluster.RegisterStmtIfNew(fullStmt))
	}

	// Dest function for scanning a row.
	dest := func(i int) []interface{} {
		objects = append(objects, Operation{})
		return []interface{}{
			&objects[i].ID,
			&objects[i].UUID,
			&objects[i].NodeAddress,
			&objects[i].ProjectID,
			&objects[i].NodeID,
			&objects[i].Type,
		}
	}

	// Select.
	err := query.SelectObjects(stmt, dest, args...)
	if err != nil {
		return nil, errors.Wrap(err, "Failed to fetch operations")
	}

	return objects, nil
}

// CreateOrReplaceOperation adds a new operation to the database.
// generator: operation CreateOrReplace
func (c *ClusterTx) CreateOrReplaceOperation(object Operation) (int64, error) {
	args := make([]interface{}, 4)

	// Populate the statement arguments.
	args[0] = object.UUID
	args[1] = object.ProjectID
	args[2] = object.NodeID
	args[3] = object.Type

	// Prepared statement to use.
	stmt := c.stmt(operationCreateOrReplace)

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, errors.Wrap(err, "Failed to create operation")
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, errors.Wrap(err, "Failed to fetch operation ID")
	}

	return id, nil
}

// DeleteOperationByUUID deletes the operation matching the given key parameters.
// generator: operation DeleteOne-by-UUID
func (c *ClusterTx) DeleteOperationByUUID(uUID string, filter OperationFilter) error {
	stmt := c.stmt(operationDeleteByUUID)
	args := []interface{}{
		uUID,
	}
	stmtStr := cluster.GetRegisteredStmt(operationDeleteByUUID)
	if filter.ID != nil {
		args = append(args, filter.ID)
		stmtParts := strings.Split(stmtStr, "ORDER BY")
		stmtBody := stmtParts[0]
		stmtOrderBy := ""
		if len(stmtParts) == 2 {
			stmtOrderBy = " ORDER BY " + stmtParts[1]
		}
		if strings.Contains(stmtBody, "WHERE") {
			stmtBody += " AND "
		} else {
			stmtBody += " WHERE "
		}
		fullStmt := fmt.Sprintf("%s%s = ?%s", stmtBody, "id", stmtOrderBy)
		stmt = c.stmt(cluster.RegisterStmtIfNew(fullStmt))
	}

	result, err := stmt.Exec(args...)
	if err != nil {
		return errors.Wrap(err, "Delete operation")
	}

	n, err := result.RowsAffected()
	if err != nil {
		return errors.Wrap(err, "Fetch affected rows")
	}
	if n != 1 {
		return fmt.Errorf("Query deleted %d rows instead of 1", n)
	}

	return nil
}

// DeleteOperationByNodeID deletes the operation matching the given key parameters.
// generator: operation DeleteOne-by-NodeID
func (c *ClusterTx) DeleteOperationByNodeID(nodeID int64, filter OperationFilter) error {
	stmt := c.stmt(operationDeleteByNodeID)
	args := []interface{}{
		nodeID,
	}
	stmtStr := cluster.GetRegisteredStmt(operationDeleteByNodeID)
	if filter.ID != nil {
		args = append(args, filter.ID)
		stmtParts := strings.Split(stmtStr, "ORDER BY")
		stmtBody := stmtParts[0]
		stmtOrderBy := ""
		if len(stmtParts) == 2 {
			stmtOrderBy = " ORDER BY " + stmtParts[1]
		}
		if strings.Contains(stmtBody, "WHERE") {
			stmtBody += " AND "
		} else {
			stmtBody += " WHERE "
		}
		fullStmt := fmt.Sprintf("%s%s = ?%s", stmtBody, "id", stmtOrderBy)
		stmt = c.stmt(cluster.RegisterStmtIfNew(fullStmt))
	}

	result, err := stmt.Exec(args...)
	if err != nil {
		return errors.Wrap(err, "Delete operation")
	}

	n, err := result.RowsAffected()
	if err != nil {
		return errors.Wrap(err, "Fetch affected rows")
	}
	if n != 1 {
		return fmt.Errorf("Query deleted %d rows instead of 1", n)
	}

	return nil
}

// DeleteOperationsByUUID deletes the operation matching the given key parameters.
// generator: operation DeleteMany-by-UUID
func (c *ClusterTx) DeleteOperationsByUUID(uUID string, filter OperationFilter) error {
	stmt := c.stmt(operationDeleteByUUID)
	args := []interface{}{
		uUID,
	}
	stmtStr := cluster.GetRegisteredStmt(operationDeleteByUUID)
	if filter.ID != nil {
		args = append(args, filter.ID)
		stmtParts := strings.Split(stmtStr, "ORDER BY")
		stmtBody := stmtParts[0]
		stmtOrderBy := ""
		if len(stmtParts) == 2 {
			stmtOrderBy = " ORDER BY " + stmtParts[1]
		}
		if strings.Contains(stmtBody, "WHERE") {
			stmtBody += " AND "
		} else {
			stmtBody += " WHERE "
		}
		fullStmt := fmt.Sprintf("%s%s = ?%s", stmtBody, "id", stmtOrderBy)
		stmt = c.stmt(cluster.RegisterStmtIfNew(fullStmt))
	}

	result, err := stmt.Exec(args...)
	if err != nil {
		return errors.Wrap(err, "Delete operation")
	}

	_, err = result.RowsAffected()
	if err != nil {
		return errors.Wrap(err, "Fetch affected rows")
	}

	return nil
}

// DeleteOperationsByNodeID deletes the operation matching the given key parameters.
// generator: operation DeleteMany-by-NodeID
func (c *ClusterTx) DeleteOperationsByNodeID(nodeID int64, filter OperationFilter) error {
	stmt := c.stmt(operationDeleteByNodeID)
	args := []interface{}{
		nodeID,
	}
	stmtStr := cluster.GetRegisteredStmt(operationDeleteByNodeID)
	if filter.ID != nil {
		args = append(args, filter.ID)
		stmtParts := strings.Split(stmtStr, "ORDER BY")
		stmtBody := stmtParts[0]
		stmtOrderBy := ""
		if len(stmtParts) == 2 {
			stmtOrderBy = " ORDER BY " + stmtParts[1]
		}
		if strings.Contains(stmtBody, "WHERE") {
			stmtBody += " AND "
		} else {
			stmtBody += " WHERE "
		}
		fullStmt := fmt.Sprintf("%s%s = ?%s", stmtBody, "id", stmtOrderBy)
		stmt = c.stmt(cluster.RegisterStmtIfNew(fullStmt))
	}

	result, err := stmt.Exec(args...)
	if err != nil {
		return errors.Wrap(err, "Delete operation")
	}

	_, err = result.RowsAffected()
	if err != nil {
		return errors.Wrap(err, "Fetch affected rows")
	}

	return nil
}
