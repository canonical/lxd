//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"
	"net/http"
	"strings"

	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var imageObjects = RegisterStmt(`
SELECT images.id, projects.name AS project, images.fingerprint, images.type, images.filename, images.size, images.public, images.architecture, images.creation_date, images.expiry_date, images.upload_date, images.cached, images.last_use_date, images.auto_update
  FROM images JOIN projects ON images.project_id = projects.id
  ORDER BY projects.id, images.fingerprint
`)

var imageObjectsByID = RegisterStmt(`
SELECT images.id, projects.name AS project, images.fingerprint, images.type, images.filename, images.size, images.public, images.architecture, images.creation_date, images.expiry_date, images.upload_date, images.cached, images.last_use_date, images.auto_update
  FROM images JOIN projects ON images.project_id = projects.id
  WHERE images.id = ? ORDER BY projects.id, images.fingerprint
`)

var imageObjectsByProject = RegisterStmt(`
SELECT images.id, projects.name AS project, images.fingerprint, images.type, images.filename, images.size, images.public, images.architecture, images.creation_date, images.expiry_date, images.upload_date, images.cached, images.last_use_date, images.auto_update
  FROM images JOIN projects ON images.project_id = projects.id
  WHERE project = ? ORDER BY projects.id, images.fingerprint
`)

var imageObjectsByProjectAndCached = RegisterStmt(`
SELECT images.id, projects.name AS project, images.fingerprint, images.type, images.filename, images.size, images.public, images.architecture, images.creation_date, images.expiry_date, images.upload_date, images.cached, images.last_use_date, images.auto_update
  FROM images JOIN projects ON images.project_id = projects.id
  WHERE project = ? AND images.cached = ? ORDER BY projects.id, images.fingerprint
`)

var imageObjectsByProjectAndPublic = RegisterStmt(`
SELECT images.id, projects.name AS project, images.fingerprint, images.type, images.filename, images.size, images.public, images.architecture, images.creation_date, images.expiry_date, images.upload_date, images.cached, images.last_use_date, images.auto_update
  FROM images JOIN projects ON images.project_id = projects.id
  WHERE project = ? AND images.public = ? ORDER BY projects.id, images.fingerprint
`)

var imageObjectsByFingerprint = RegisterStmt(`
SELECT images.id, projects.name AS project, images.fingerprint, images.type, images.filename, images.size, images.public, images.architecture, images.creation_date, images.expiry_date, images.upload_date, images.cached, images.last_use_date, images.auto_update
  FROM images JOIN projects ON images.project_id = projects.id
  WHERE images.fingerprint = ? ORDER BY projects.id, images.fingerprint
`)

var imageObjectsByCached = RegisterStmt(`
SELECT images.id, projects.name AS project, images.fingerprint, images.type, images.filename, images.size, images.public, images.architecture, images.creation_date, images.expiry_date, images.upload_date, images.cached, images.last_use_date, images.auto_update
  FROM images JOIN projects ON images.project_id = projects.id
  WHERE images.cached = ? ORDER BY projects.id, images.fingerprint
`)

var imageObjectsByAutoUpdate = RegisterStmt(`
SELECT images.id, projects.name AS project, images.fingerprint, images.type, images.filename, images.size, images.public, images.architecture, images.creation_date, images.expiry_date, images.upload_date, images.cached, images.last_use_date, images.auto_update
  FROM images JOIN projects ON images.project_id = projects.id
  WHERE images.auto_update = ? ORDER BY projects.id, images.fingerprint
`)

// GetImages returns all available images.
// generator: image GetMany
func GetImages(ctx context.Context, tx *sql.Tx, filter ImageFilter) ([]Image, error) {
	var err error

	// Result slice.
	objects := make([]Image, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	var queryStr string
	args := make([]any, 0, DqliteMaxParams)

	if len(filter.Project) > 0 && len(filter.Public) > 0 && len(filter.ID) == 0 && len(filter.Fingerprint) == 0 && len(filter.Cached) == 0 && len(filter.AutoUpdate) == 0 {
		for _, arg := range filter.Project {
			args = append(args, arg)
		}

		for _, arg := range filter.Public {
			args = append(args, arg)
		}

		if len(filter.Project) == 1 && len(filter.Public) == 1 {
			sqlStmt = Stmt(tx, imageObjectsByProjectAndPublic)
		} else {
			queryStr = StmtString(imageObjectsByProjectAndPublic)
			queryStr = strings.Replace(queryStr, "project = ?", fmt.Sprintf("project IN (?%s)", strings.Repeat(", ?", len(filter.Project)-1)), -1)
			queryStr = strings.Replace(queryStr, "public = ?", fmt.Sprintf("public IN (?%s)", strings.Repeat(", ?", len(filter.Public)-1)), -1)
		}
	} else if len(filter.Project) > 0 && len(filter.Cached) > 0 && len(filter.ID) == 0 && len(filter.Fingerprint) == 0 && len(filter.Public) == 0 && len(filter.AutoUpdate) == 0 {
		for _, arg := range filter.Project {
			args = append(args, arg)
		}

		for _, arg := range filter.Cached {
			args = append(args, arg)
		}

		if len(filter.Project) == 1 && len(filter.Cached) == 1 {
			sqlStmt = Stmt(tx, imageObjectsByProjectAndCached)
		} else {
			queryStr = StmtString(imageObjectsByProjectAndCached)
			queryStr = strings.Replace(queryStr, "project = ?", fmt.Sprintf("project IN (?%s)", strings.Repeat(", ?", len(filter.Project)-1)), -1)
			queryStr = strings.Replace(queryStr, "cached = ?", fmt.Sprintf("cached IN (?%s)", strings.Repeat(", ?", len(filter.Cached)-1)), -1)
		}
	} else if len(filter.Project) > 0 && len(filter.ID) == 0 && len(filter.Fingerprint) == 0 && len(filter.Public) == 0 && len(filter.Cached) == 0 && len(filter.AutoUpdate) == 0 {
		for _, arg := range filter.Project {
			args = append(args, arg)
		}

		if len(filter.Project) == 1 {
			sqlStmt = Stmt(tx, imageObjectsByProject)
		} else {
			queryStr = StmtString(imageObjectsByProject)
			queryStr = strings.Replace(queryStr, "project = ?", fmt.Sprintf("project IN (?%s)", strings.Repeat(", ?", len(filter.Project)-1)), -1)
		}
	} else if len(filter.ID) > 0 && len(filter.Project) == 0 && len(filter.Fingerprint) == 0 && len(filter.Public) == 0 && len(filter.Cached) == 0 && len(filter.AutoUpdate) == 0 {
		for _, arg := range filter.ID {
			args = append(args, arg)
		}

		if len(filter.ID) == 1 {
			sqlStmt = Stmt(tx, imageObjectsByID)
		} else {
			queryStr = StmtString(imageObjectsByID)
			queryStr = strings.Replace(queryStr, "id = ?", fmt.Sprintf("id IN (?%s)", strings.Repeat(", ?", len(filter.ID)-1)), -1)
		}
	} else if len(filter.Fingerprint) > 0 && len(filter.ID) == 0 && len(filter.Project) == 0 && len(filter.Public) == 0 && len(filter.Cached) == 0 && len(filter.AutoUpdate) == 0 {
		for _, arg := range filter.Fingerprint {
			args = append(args, arg)
		}

		if len(filter.Fingerprint) == 1 {
			sqlStmt = Stmt(tx, imageObjectsByFingerprint)
		} else {
			queryStr = StmtString(imageObjectsByFingerprint)
			queryStr = strings.Replace(queryStr, "fingerprint = ?", fmt.Sprintf("fingerprint IN (?%s)", strings.Repeat(", ?", len(filter.Fingerprint)-1)), -1)
		}
	} else if len(filter.Cached) > 0 && len(filter.ID) == 0 && len(filter.Project) == 0 && len(filter.Fingerprint) == 0 && len(filter.Public) == 0 && len(filter.AutoUpdate) == 0 {
		for _, arg := range filter.Cached {
			args = append(args, arg)
		}

		if len(filter.Cached) == 1 {
			sqlStmt = Stmt(tx, imageObjectsByCached)
		} else {
			queryStr = StmtString(imageObjectsByCached)
			queryStr = strings.Replace(queryStr, "cached = ?", fmt.Sprintf("cached IN (?%s)", strings.Repeat(", ?", len(filter.Cached)-1)), -1)
		}
	} else if len(filter.AutoUpdate) > 0 && len(filter.ID) == 0 && len(filter.Project) == 0 && len(filter.Fingerprint) == 0 && len(filter.Public) == 0 && len(filter.Cached) == 0 {
		for _, arg := range filter.AutoUpdate {
			args = append(args, arg)
		}

		if len(filter.AutoUpdate) == 1 {
			sqlStmt = Stmt(tx, imageObjectsByAutoUpdate)
		} else {
			queryStr = StmtString(imageObjectsByAutoUpdate)
			queryStr = strings.Replace(queryStr, "autoUpdate = ?", fmt.Sprintf("autoUpdate IN (?%s)", strings.Repeat(", ?", len(filter.AutoUpdate)-1)), -1)
		}
	} else if len(filter.ID) == 0 && len(filter.Project) == 0 && len(filter.Fingerprint) == 0 && len(filter.Public) == 0 && len(filter.Cached) == 0 && len(filter.AutoUpdate) == 0 {
		sqlStmt = Stmt(tx, imageObjects)
	} else {
		return nil, fmt.Errorf("No statement exists for the given Filter")
	}

	// Dest function for scanning a row.
	dest := func(i int) []any {
		objects = append(objects, Image{})
		return []any{
			&objects[i].ID,
			&objects[i].Project,
			&objects[i].Fingerprint,
			&objects[i].Type,
			&objects[i].Filename,
			&objects[i].Size,
			&objects[i].Public,
			&objects[i].Architecture,
			&objects[i].CreationDate,
			&objects[i].ExpiryDate,
			&objects[i].UploadDate,
			&objects[i].Cached,
			&objects[i].LastUseDate,
			&objects[i].AutoUpdate,
		}
	}

	// Select.
	if queryStr != "" {
		err = query.QueryObjects(tx, queryStr, dest, args...)
	} else {
		err = query.SelectObjects(sqlStmt, dest, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"images\" table: %w", err)
	}

	return objects, nil
}

// GetImage returns the image with the given key.
// generator: image GetOne
func GetImage(ctx context.Context, tx *sql.Tx, project string, fingerprint string) (*Image, error) {
	filter := ImageFilter{}
	filter.Project = []string{project}
	filter.Fingerprint = []string{fingerprint}

	objects, err := GetImages(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"images\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "Image not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"images\" entry matches")
	}
}
