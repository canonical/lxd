//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"
	"net/http"
	"strings"

	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var warningObjects = RegisterStmt(`
SELECT warnings.id, coalesce(nodes.name, '') AS node, coalesce(projects.name, '') AS project, coalesce(warnings.entity_type_code, -1), coalesce(warnings.entity_id, -1), warnings.uuid, warnings.type_code, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.last_message, warnings.count
  FROM warnings LEFT JOIN nodes ON warnings.node_id = nodes.id LEFT JOIN projects ON warnings.project_id = projects.id
  ORDER BY warnings.uuid
`)

var warningObjectsByUUID = RegisterStmt(`
SELECT warnings.id, coalesce(nodes.name, '') AS node, coalesce(projects.name, '') AS project, coalesce(warnings.entity_type_code, -1), coalesce(warnings.entity_id, -1), warnings.uuid, warnings.type_code, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.last_message, warnings.count
  FROM warnings LEFT JOIN nodes ON warnings.node_id = nodes.id LEFT JOIN projects ON warnings.project_id = projects.id
  WHERE warnings.uuid = ? ORDER BY warnings.uuid
`)

var warningObjectsByProject = RegisterStmt(`
SELECT warnings.id, coalesce(nodes.name, '') AS node, coalesce(projects.name, '') AS project, coalesce(warnings.entity_type_code, -1), coalesce(warnings.entity_id, -1), warnings.uuid, warnings.type_code, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.last_message, warnings.count
  FROM warnings LEFT JOIN nodes ON warnings.node_id = nodes.id LEFT JOIN projects ON warnings.project_id = projects.id
  WHERE coalesce(project, '') = ? ORDER BY warnings.uuid
`)

var warningObjectsByStatus = RegisterStmt(`
SELECT warnings.id, coalesce(nodes.name, '') AS node, coalesce(projects.name, '') AS project, coalesce(warnings.entity_type_code, -1), coalesce(warnings.entity_id, -1), warnings.uuid, warnings.type_code, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.last_message, warnings.count
  FROM warnings LEFT JOIN nodes ON warnings.node_id = nodes.id LEFT JOIN projects ON warnings.project_id = projects.id
  WHERE warnings.status = ? ORDER BY warnings.uuid
`)

var warningObjectsByNodeAndTypeCode = RegisterStmt(`
SELECT warnings.id, coalesce(nodes.name, '') AS node, coalesce(projects.name, '') AS project, coalesce(warnings.entity_type_code, -1), coalesce(warnings.entity_id, -1), warnings.uuid, warnings.type_code, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.last_message, warnings.count
  FROM warnings LEFT JOIN nodes ON warnings.node_id = nodes.id LEFT JOIN projects ON warnings.project_id = projects.id
  WHERE coalesce(node, '') = ? AND warnings.type_code = ? ORDER BY warnings.uuid
`)

var warningObjectsByNodeAndTypeCodeAndProject = RegisterStmt(`
SELECT warnings.id, coalesce(nodes.name, '') AS node, coalesce(projects.name, '') AS project, coalesce(warnings.entity_type_code, -1), coalesce(warnings.entity_id, -1), warnings.uuid, warnings.type_code, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.last_message, warnings.count
  FROM warnings LEFT JOIN nodes ON warnings.node_id = nodes.id LEFT JOIN projects ON warnings.project_id = projects.id
  WHERE coalesce(node, '') = ? AND warnings.type_code = ? AND coalesce(project, '') = ? ORDER BY warnings.uuid
`)

var warningObjectsByNodeAndTypeCodeAndProjectAndEntityTypeCodeAndEntityID = RegisterStmt(`
SELECT warnings.id, coalesce(nodes.name, '') AS node, coalesce(projects.name, '') AS project, coalesce(warnings.entity_type_code, -1), coalesce(warnings.entity_id, -1), warnings.uuid, warnings.type_code, warnings.status, warnings.first_seen_date, warnings.last_seen_date, warnings.updated_date, warnings.last_message, warnings.count
  FROM warnings LEFT JOIN nodes ON warnings.node_id = nodes.id LEFT JOIN projects ON warnings.project_id = projects.id
  WHERE coalesce(node, '') = ? AND warnings.type_code = ? AND coalesce(project, '') = ? AND coalesce(warnings.entity_type_code, -1) = ? AND coalesce(warnings.entity_id, -1) = ? ORDER BY warnings.uuid
`)

var warningDeleteByUUID = RegisterStmt(`
DELETE FROM warnings WHERE uuid = ?
`)

var warningDeleteByEntityTypeCodeAndEntityID = RegisterStmt(`
DELETE FROM warnings WHERE entity_type_code = ? AND entity_id = ?
`)

var warningID = RegisterStmt(`
SELECT warnings.id FROM warnings
  WHERE warnings.uuid = ?
`)

// GetWarnings returns all available warnings.
// generator: warning GetMany
func GetWarnings(ctx context.Context, tx *sql.Tx, filter WarningFilter) ([]Warning, error) {
	var err error

	// Result slice.
	objects := make([]Warning, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	var queryStr string
	args := make([]any, 0, DqliteMaxParams)

	if len(filter.Node) > 0 && len(filter.TypeCode) > 0 && len(filter.Project) > 0 && len(filter.EntityTypeCode) > 0 && len(filter.EntityID) > 0 && len(filter.ID) == 0 && len(filter.UUID) == 0 && len(filter.Status) == 0 {
		for _, arg := range filter.Node {
			args = append(args, arg)
		}

		for _, arg := range filter.TypeCode {
			args = append(args, arg)
		}

		for _, arg := range filter.Project {
			args = append(args, arg)
		}

		for _, arg := range filter.EntityTypeCode {
			args = append(args, arg)
		}

		for _, arg := range filter.EntityID {
			args = append(args, arg)
		}

		if len(filter.Node) == 1 && len(filter.TypeCode) == 1 && len(filter.Project) == 1 && len(filter.EntityTypeCode) == 1 && len(filter.EntityID) == 1 {
			sqlStmt = Stmt(tx, warningObjectsByNodeAndTypeCodeAndProjectAndEntityTypeCodeAndEntityID)
		} else {
			queryStr = StmtString(warningObjectsByNodeAndTypeCodeAndProjectAndEntityTypeCodeAndEntityID)
			queryStr = strings.Replace(queryStr, "node = ?", fmt.Sprintf("node IN (?%s)", strings.Repeat(", ?", len(filter.Node)-1)), -1)
			queryStr = strings.Replace(queryStr, "typeCode = ?", fmt.Sprintf("typeCode IN (?%s)", strings.Repeat(", ?", len(filter.TypeCode)-1)), -1)
			queryStr = strings.Replace(queryStr, "project = ?", fmt.Sprintf("project IN (?%s)", strings.Repeat(", ?", len(filter.Project)-1)), -1)
			queryStr = strings.Replace(queryStr, "entityTypeCode = ?", fmt.Sprintf("entityTypeCode IN (?%s)", strings.Repeat(", ?", len(filter.EntityTypeCode)-1)), -1)
			queryStr = strings.Replace(queryStr, "entityID = ?", fmt.Sprintf("entityID IN (?%s)", strings.Repeat(", ?", len(filter.EntityID)-1)), -1)
		}
	} else if len(filter.Node) > 0 && len(filter.TypeCode) > 0 && len(filter.Project) > 0 && len(filter.ID) == 0 && len(filter.UUID) == 0 && len(filter.EntityTypeCode) == 0 && len(filter.EntityID) == 0 && len(filter.Status) == 0 {
		for _, arg := range filter.Node {
			args = append(args, arg)
		}

		for _, arg := range filter.TypeCode {
			args = append(args, arg)
		}

		for _, arg := range filter.Project {
			args = append(args, arg)
		}

		if len(filter.Node) == 1 && len(filter.TypeCode) == 1 && len(filter.Project) == 1 {
			sqlStmt = Stmt(tx, warningObjectsByNodeAndTypeCodeAndProject)
		} else {
			queryStr = StmtString(warningObjectsByNodeAndTypeCodeAndProject)
			queryStr = strings.Replace(queryStr, "node = ?", fmt.Sprintf("node IN (?%s)", strings.Repeat(", ?", len(filter.Node)-1)), -1)
			queryStr = strings.Replace(queryStr, "typeCode = ?", fmt.Sprintf("typeCode IN (?%s)", strings.Repeat(", ?", len(filter.TypeCode)-1)), -1)
			queryStr = strings.Replace(queryStr, "project = ?", fmt.Sprintf("project IN (?%s)", strings.Repeat(", ?", len(filter.Project)-1)), -1)
		}
	} else if len(filter.Node) > 0 && len(filter.TypeCode) > 0 && len(filter.ID) == 0 && len(filter.UUID) == 0 && len(filter.Project) == 0 && len(filter.EntityTypeCode) == 0 && len(filter.EntityID) == 0 && len(filter.Status) == 0 {
		for _, arg := range filter.Node {
			args = append(args, arg)
		}

		for _, arg := range filter.TypeCode {
			args = append(args, arg)
		}

		if len(filter.Node) == 1 && len(filter.TypeCode) == 1 {
			sqlStmt = Stmt(tx, warningObjectsByNodeAndTypeCode)
		} else {
			queryStr = StmtString(warningObjectsByNodeAndTypeCode)
			queryStr = strings.Replace(queryStr, "node = ?", fmt.Sprintf("node IN (?%s)", strings.Repeat(", ?", len(filter.Node)-1)), -1)
			queryStr = strings.Replace(queryStr, "typeCode = ?", fmt.Sprintf("typeCode IN (?%s)", strings.Repeat(", ?", len(filter.TypeCode)-1)), -1)
		}
	} else if len(filter.UUID) > 0 && len(filter.ID) == 0 && len(filter.Project) == 0 && len(filter.Node) == 0 && len(filter.TypeCode) == 0 && len(filter.EntityTypeCode) == 0 && len(filter.EntityID) == 0 && len(filter.Status) == 0 {
		for _, arg := range filter.UUID {
			args = append(args, arg)
		}

		if len(filter.UUID) == 1 {
			sqlStmt = Stmt(tx, warningObjectsByUUID)
		} else {
			queryStr = StmtString(warningObjectsByUUID)
			queryStr = strings.Replace(queryStr, "uuid = ?", fmt.Sprintf("uuid IN (?%s)", strings.Repeat(", ?", len(filter.UUID)-1)), -1)
		}
	} else if len(filter.Status) > 0 && len(filter.ID) == 0 && len(filter.UUID) == 0 && len(filter.Project) == 0 && len(filter.Node) == 0 && len(filter.TypeCode) == 0 && len(filter.EntityTypeCode) == 0 && len(filter.EntityID) == 0 {
		for _, arg := range filter.Status {
			args = append(args, arg)
		}

		if len(filter.Status) == 1 {
			sqlStmt = Stmt(tx, warningObjectsByStatus)
		} else {
			queryStr = StmtString(warningObjectsByStatus)
			queryStr = strings.Replace(queryStr, "status = ?", fmt.Sprintf("status IN (?%s)", strings.Repeat(", ?", len(filter.Status)-1)), -1)
		}
	} else if len(filter.Project) > 0 && len(filter.ID) == 0 && len(filter.UUID) == 0 && len(filter.Node) == 0 && len(filter.TypeCode) == 0 && len(filter.EntityTypeCode) == 0 && len(filter.EntityID) == 0 && len(filter.Status) == 0 {
		for _, arg := range filter.Project {
			args = append(args, arg)
		}

		if len(filter.Project) == 1 {
			sqlStmt = Stmt(tx, warningObjectsByProject)
		} else {
			queryStr = StmtString(warningObjectsByProject)
			queryStr = strings.Replace(queryStr, "project = ?", fmt.Sprintf("project IN (?%s)", strings.Repeat(", ?", len(filter.Project)-1)), -1)
		}
	} else if len(filter.ID) == 0 && len(filter.UUID) == 0 && len(filter.Project) == 0 && len(filter.Node) == 0 && len(filter.TypeCode) == 0 && len(filter.EntityTypeCode) == 0 && len(filter.EntityID) == 0 && len(filter.Status) == 0 {
		sqlStmt = Stmt(tx, warningObjects)
	} else {
		return nil, fmt.Errorf("No statement exists for the given Filter")
	}

	// Dest function for scanning a row.
	dest := func(i int) []any {
		objects = append(objects, Warning{})
		return []any{
			&objects[i].ID,
			&objects[i].Node,
			&objects[i].Project,
			&objects[i].EntityTypeCode,
			&objects[i].EntityID,
			&objects[i].UUID,
			&objects[i].TypeCode,
			&objects[i].Status,
			&objects[i].FirstSeenDate,
			&objects[i].LastSeenDate,
			&objects[i].UpdatedDate,
			&objects[i].LastMessage,
			&objects[i].Count,
		}
	}

	// Select.
	if queryStr != "" {
		err = query.QueryObjects(tx, queryStr, dest, args...)
	} else {
		err = query.SelectObjects(sqlStmt, dest, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"warnings\" table: %w", err)
	}

	return objects, nil
}

// GetWarning returns the warning with the given key.
// generator: warning GetOne-by-UUID
func GetWarning(ctx context.Context, tx *sql.Tx, uuid string) (*Warning, error) {
	filter := WarningFilter{}
	filter.UUID = []string{uuid}

	objects, err := GetWarnings(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"warnings\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "Warning not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"warnings\" entry matches")
	}
}

// DeleteWarning deletes the warning matching the given key parameters.
// generator: warning DeleteOne-by-UUID
func DeleteWarning(ctx context.Context, tx *sql.Tx, uuid string) error {
	stmt := Stmt(tx, warningDeleteByUUID)
	result, err := stmt.Exec(uuid)
	if err != nil {
		return fmt.Errorf("Delete \"warnings\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "Warning not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Warning rows instead of 1", n)
	}

	return nil
}

// DeleteWarnings deletes the warning matching the given key parameters.
// generator: warning DeleteMany-by-EntityTypeCode-and-EntityID
func DeleteWarnings(ctx context.Context, tx *sql.Tx, entityTypeCode int, entityID int) error {
	stmt := Stmt(tx, warningDeleteByEntityTypeCodeAndEntityID)
	result, err := stmt.Exec(entityTypeCode, entityID)
	if err != nil {
		return fmt.Errorf("Delete \"warnings\": %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}

// GetWarningID return the ID of the warning with the given key.
// generator: warning ID
func GetWarningID(ctx context.Context, tx *sql.Tx, uuid string) (int64, error) {
	stmt := Stmt(tx, warningID)
	rows, err := stmt.Query(uuid)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"warnings\" ID: %w", err)
	}

	defer func() { _ = rows.Close() }()

	// Ensure we read one and only one row.
	if !rows.Next() {
		return -1, api.StatusErrorf(http.StatusNotFound, "Warning not found")
	}

	var id int64
	err = rows.Scan(&id)
	if err != nil {
		return -1, fmt.Errorf("Failed to scan ID: %w", err)
	}

	if rows.Next() {
		return -1, fmt.Errorf("More than one row returned")
	}

	err = rows.Err()
	if err != nil {
		return -1, fmt.Errorf("Result set failure: %w", err)
	}

	return id, nil
}

// WarningExists checks if a warning with the given key exists.
// generator: warning Exists
func WarningExists(ctx context.Context, tx *sql.Tx, uuid string) (bool, error) {
	_, err := GetWarningID(ctx, tx, uuid)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}
