//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var clusterLinkObjects = RegisterStmt(`
SELECT cluster_links.id, cluster_links.identity_id, cluster_links.name, coalesce(cluster_links.description, ''), cluster_links.type
  FROM cluster_links
  ORDER BY cluster_links.name
`)

var clusterLinkObjectsByID = RegisterStmt(`
SELECT cluster_links.id, cluster_links.identity_id, cluster_links.name, coalesce(cluster_links.description, ''), cluster_links.type
  FROM cluster_links
  WHERE ( cluster_links.id = ? )
  ORDER BY cluster_links.name
`)

var clusterLinkObjectsByName = RegisterStmt(`
SELECT cluster_links.id, cluster_links.identity_id, cluster_links.name, coalesce(cluster_links.description, ''), cluster_links.type
  FROM cluster_links
  WHERE ( cluster_links.name = ? )
  ORDER BY cluster_links.name
`)

var clusterLinkID = RegisterStmt(`
SELECT cluster_links.id FROM cluster_links
  WHERE cluster_links.name = ?
`)

var clusterLinkCreate = RegisterStmt(`
INSERT INTO cluster_links (identity_id, name, description, type)
  VALUES (?, ?, ?, ?)
`)

var clusterLinkUpdate = RegisterStmt(`
UPDATE cluster_links
  SET identity_id = ?, name = ?, description = ?, type = ?
 WHERE id = ?
`)

var clusterLinkDeleteByName = RegisterStmt(`
DELETE FROM cluster_links WHERE name = ?
`)

var clusterLinkRename = RegisterStmt(`
UPDATE cluster_links SET name = ? WHERE name = ?
`)

// clusterLinkColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the ClusterLink entity.
func clusterLinkColumns() string {
	return "cluster_links.id, cluster_links.identity_id, cluster_links.name, coalesce(cluster_links.description, ''), cluster_links.type"
}

// getClusterLinks can be used to run handwritten sql.Stmts to return a slice of objects.
func getClusterLinks(ctx context.Context, stmt *sql.Stmt, args ...any) ([]ClusterLink, error) {
	objects := make([]ClusterLink, 0)

	dest := func(scan func(dest ...any) error) error {
		c := ClusterLink{}
		err := scan(&c.ID, &c.IdentityID, &c.Name, &c.Description, &c.Type)
		if err != nil {
			return err
		}

		objects = append(objects, c)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_links\" table: %w", err)
	}

	return objects, nil
}

// getClusterLinksRaw can be used to run handwritten query strings to return a slice of objects.
func getClusterLinksRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]ClusterLink, error) {
	objects := make([]ClusterLink, 0)

	dest := func(scan func(dest ...any) error) error {
		c := ClusterLink{}
		err := scan(&c.ID, &c.IdentityID, &c.Name, &c.Description, &c.Type)
		if err != nil {
			return err
		}

		objects = append(objects, c)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_links\" table: %w", err)
	}

	return objects, nil
}

// GetClusterLinks returns all available cluster_links.
// generator: cluster_link GetMany
func GetClusterLinks(ctx context.Context, tx *sql.Tx, filters ...ClusterLinkFilter) ([]ClusterLink, error) {
	var err error

	// Result slice.
	objects := make([]ClusterLink, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, clusterLinkObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"clusterLinkObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil && filter.ID == nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, clusterLinkObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"clusterLinkObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(clusterLinkObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"clusterLinkObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID != nil && filter.Name == nil {
			args = append(args, []any{filter.ID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, clusterLinkObjectsByID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"clusterLinkObjectsByID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(clusterLinkObjectsByID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"clusterLinkObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Name == nil {
			return nil, errors.New("Cannot filter on empty ClusterLinkFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getClusterLinks(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getClusterLinksRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_links\" table: %w", err)
	}

	return objects, nil
}

// GetClusterLink returns the cluster_link with the given key.
// generator: cluster_link GetOne
func GetClusterLink(ctx context.Context, tx *sql.Tx, name string) (*ClusterLink, error) {
	filter := ClusterLinkFilter{}
	filter.Name = &name

	objects, err := GetClusterLinks(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_links\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "ClusterLink not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, errors.New("More than one \"cluster_links\" entry matches")
	}
}

// GetClusterLinkID return the ID of the cluster_link with the given key.
// generator: cluster_link ID
func GetClusterLinkID(ctx context.Context, tx *sql.Tx, name string) (int64, error) {
	stmt, err := Stmt(tx, clusterLinkID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"clusterLinkID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "ClusterLink not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"cluster_links\" ID: %w", err)
	}

	return id, nil
}

// ClusterLinkExists checks if a cluster_link with the given key exists.
// generator: cluster_link Exists
func ClusterLinkExists(ctx context.Context, tx *sql.Tx, name string) (bool, error) {
	_, err := GetClusterLinkID(ctx, tx, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateClusterLink adds a new cluster_link to the database.
// generator: cluster_link Create
func CreateClusterLink(ctx context.Context, tx *sql.Tx, object ClusterLink) (int64, error) {
	// Check if a cluster_link with the same key exists.
	exists, err := ClusterLinkExists(ctx, tx, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"cluster_links\" entry already exists")
	}

	args := make([]any, 4)

	// Populate the statement arguments.
	args[0] = object.IdentityID
	args[1] = object.Name
	args[2] = object.Description
	args[3] = object.Type

	// Prepared statement to use.
	stmt, err := Stmt(tx, clusterLinkCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"clusterLinkCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"cluster_links\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"cluster_links\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateClusterLink updates the cluster_link matching the given key parameters.
// generator: cluster_link Update
func UpdateClusterLink(ctx context.Context, tx *sql.Tx, name string, object ClusterLink) error {
	id, err := GetClusterLinkID(ctx, tx, name)
	if err != nil {
		return err
	}

	stmt, err := Stmt(tx, clusterLinkUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"clusterLinkUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.IdentityID, object.Name, object.Description, object.Type, id)
	if err != nil {
		return fmt.Errorf("Update \"cluster_links\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// DeleteClusterLink deletes the cluster_link matching the given key parameters.
// generator: cluster_link DeleteOne-by-Name
func DeleteClusterLink(ctx context.Context, tx *sql.Tx, name string) error {
	stmt, err := Stmt(tx, clusterLinkDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"clusterLinkDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"cluster_links\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "ClusterLink not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d ClusterLink rows instead of 1", n)
	}

	return nil
}

// RenameClusterLink renames the cluster_link matching the given key parameters.
// generator: cluster_link Rename
func RenameClusterLink(ctx context.Context, tx *sql.Tx, name string, to string) error {
	stmt, err := Stmt(tx, clusterLinkRename)
	if err != nil {
		return fmt.Errorf("Failed to get \"clusterLinkRename\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(to, name)
	if err != nil {
		return fmt.Errorf("Rename ClusterLink failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows failed: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query affected %d rows instead of 1", n)
	}

	return nil
}
