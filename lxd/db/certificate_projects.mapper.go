//go:build linux && cgo && !agent

package db

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"fmt"

	"github.com/lxc/lxd/lxd/db/cluster"
	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var certificateProjectObjectsByCertificateID = cluster.RegisterStmt(`
SELECT certificates_projects.certificate_id, certificates_projects.project_id
  FROM certificates_projects
  WHERE certificates_projects.certificate_id = ? ORDER BY certificates_projects.certificate_id
`)

var certificateProjectCreate = cluster.RegisterStmt(`
INSERT INTO certificates_projects (certificate_id, project_id)
  VALUES (?, ?)
`)

var certificateProjectDeleteByCertificateID = cluster.RegisterStmt(`
DELETE FROM certificates_projects WHERE certificate_id = ?
`)

// GetCertificateProjects returns all available Projects for the Certificate.
// generator: certificate_project GetMany
func (tx *ClusterTx) GetCertificateProjects(certificateID int) ([]Project, error) {
	var err error

	// Result slice.
	objects := make([]CertificateProject, 0)

	stmt := tx.stmt(certificateProjectObjectsByCertificateID)
	args := []any{certificateID}

	// Dest function for scanning a row.
	dest := func(i int) []any {
		objects = append(objects, CertificateProject{})
		return []any{
			&objects[i].CertificateID,
			&objects[i].ProjectID,
		}
	}

	// Select.
	err = query.SelectObjects(stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"certificates_projects\" table: %w", err)
	}

	result := make([]Project, len(objects))
	for i, object := range objects {
		project, err := tx.GetProjects(ProjectFilter{ID: &object.ProjectID})
		if err != nil {
			return nil, err
		}

		result[i] = project[0]
	}

	return result, nil
}

// DeleteCertificateProjects deletes the certificate_project matching the given key parameters.
// generator: certificate_project DeleteMany
func (tx *ClusterTx) DeleteCertificateProjects(certificateID int) error {
	stmt := tx.stmt(certificateProjectDeleteByCertificateID)
	result, err := stmt.Exec(int(certificateID))
	if err != nil {
		return fmt.Errorf("Delete \"certificates_projects\" entry failed: %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}

// CreateCertificateProject adds a new certificate_project to the database.
// generator: certificate_project Create
func (tx *ClusterTx) CreateCertificateProject(object CertificateProject) (int64, error) {
	args := make([]any, 2)

	// Populate the statement arguments.
	args[0] = object.CertificateID
	args[1] = object.ProjectID

	// Prepared statement to use.
	stmt := tx.stmt(certificateProjectCreate)

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"certificates_projects\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"certificates_projects\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateCertificateProjects updates the certificate_project matching the given key parameters.
// generator: certificate_project Update
func (tx *ClusterTx) UpdateCertificateProjects(certificateID int, projectNames []string) error {
	// Delete current entry.
	err := tx.DeleteCertificateProjects(certificateID)
	if err != nil {
		return err
	}

	// Insert new entries.
	for _, entry := range projectNames {
		refID, err := tx.GetProjectID(entry)
		if err != nil {
			return err
		}

		certificateProject := CertificateProject{CertificateID: certificateID, ProjectID: int(refID)}
		_, err = tx.CreateCertificateProject(certificateProject)
		if err != nil {
			return err
		}

	}
	return nil
}
